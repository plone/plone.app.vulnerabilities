from math import fabs

from plone.app.vulnerabilities import VulnerabilitiesMessageFactory as _
from plone.autoform.directives import read_permission
from plone.dexterity.content import Item
from plone.directives import form
from zope import schema
from zope.interface import Interface, implements
from zope.schema.vocabulary import SimpleVocabulary, SimpleTerm


ImpactVocabulary = SimpleVocabulary([
                        SimpleTerm("N", "low", title="None"),
                        SimpleTerm("P", "medium", title="Partial"),
                        SimpleTerm("C", "high", title="Complete")])

ComplexityVocabulary = SimpleVocabulary([
                                    SimpleTerm("H", "low", "High"),
                                    SimpleTerm("M", "medium", "Medium"),
                                    SimpleTerm("L", "high", "Low")])

AccessVectorVocabulary = SimpleVocabulary([
                                        SimpleTerm("L", "low", "Local"),
                                        SimpleTerm("A", "medium", "Adjacent Network"),
                                        SimpleTerm("N", "high", "Network")])

AuthenticationVocabulary = SimpleVocabulary([
                                         SimpleTerm("M", "low", "Multiple"),
                                         SimpleTerm("S", "medium", "Single"),
                                         SimpleTerm("N", "high", "None")])


class IVulnerability(Interface):
    """ Marker Interface for Vulnerabilities """

    vulnerability_type = schema.TextLine(title=_(u"Vulnerability type"),
                             description=_(u"General vulnerability classification"),
                             default=u"",
                             required=False)

    details = schema.Text(title=_(u"Details"),
                          description=_(u"Full description of vulnerability"),
                          default=u"",
                          required=False)

    current_status = schema.Text(title=_(u"Current status"),
                                 description=_(u"Current status of our response to this vulnerability"),
                                 default=u"",
                                 required=False)

    date_reported = schema.Date(title=_(u"Date reported"),
                                description=_(u"Date this vulnerability was reported"),
                                required=False)

    date_patched = schema.Date(title=_(u"Date patched"),
                               description=_(u"Date this vulnerability was patched"),
                               required=False)

    reported_by = schema.List(title=u"Reported by",
                              description=u"Who found this (one per line)",
                              required=False,
                              value_type=schema.TextLine(),
                              default=[u"Plone Security Team"])

    fixed_by = schema.List(title=u"Fixed by",
                           description=u"Who fixed this (one per line)",
                           required=False,
                           value_type=schema.TextLine(),
                           default=[u"Plone Security Team"])

    coordinated_by = schema.List(title=u"Coordinated by",
                                 description=u"Who coordinated this (one per line)",
                                 required=False,
                                 value_type=schema.TextLine(),
                                 default=[u"Plone Security Team"])

    cve_id = schema.TextLine(title=_(u"CVE Identifier"),
                             description=_(u"Assigned CVE identifier"),
                             default=u"",
                             required=False)

    # XXX: What about non-core packages?
    read_permission(affected_versions='plone.app.vulnerabilities.hotfix.view_release')
    affected_versions = schema.List(title=_(u"Affected Plone versions"),
                                    value_type=schema.Choice(source="plone.app.vulnerabilities.ploneversions"))


    # XXX: Original had plone version, we need to decide
    #      whether to pull this in from PSC (eww) or manually update (also eww)
    # XXX: Original had `sequence_number` - wha?
    # XXX: Original had `cwe` - prepopulated?


    form.fieldset(
        "cvss",
        label=_(u"CVSS Scoring"),
        fields=["cvss_access_vector", "cvss_access_complexity", "cvss_authentication", "cvss_confidentiality_impact", "cvss_integrity_impact", "cvss_availability_impact"]
    )

    cvss_access_vector = schema.Choice(
                            title=_(u"Access Vector"),
                            description=_(u"This metric reflects how the vulnerability is exploited. The more remote an attacker can be to attack a host, the greater the vulnerability score"),
                            vocabulary=AccessVectorVocabulary,
                            default="L",
                            required=False)


    cvss_access_complexity = schema.Choice(
                                title=_(u"Access Complexity"),
                                description=_(u"""This metric measures the complexity of the attack required to exploit the vulnerability once an attacker has gained access to the target system. For example, consider a buffer overflow in an Internet service: once the target system is located, the attacker can launch an exploit at will. Other vulnerabilities, however, may require additional steps in order to be exploited. For example, a vulnerability in an email client is only exploited after the user downloads and opens a tainted attachment. The possible values for this metric are listed in Table 2. The lower the required complexity, the higher the vulnerability score."""),
                                vocabulary=ComplexityVocabulary,
                                default="H",
                                required=False)

    cvss_authentication = schema.Choice(
                             title=_(u"Authentication"),
                             description=_(u"""This metric measures the number of times an attacker must authenticate to a target in order to exploit a vulnerability. This metric does not gauge the strength or complexity of the authentication process, only that an attacker is required to provide credentials before an exploit may occur. The fewer authentication instances that are required, the higher the vulnerability score."""),
                             vocabulary=AuthenticationVocabulary,
                             default="M",
                             required=False)

    cvss_confidentiality_impact = schema.Choice(
                                     title=_(u"Confidentiality Impact"),
                                     description=_(u"""This metric measures the impact on confidentiality of a successfully exploited vulnerability. Confidentiality refers to limiting information access and disclosure to only authorized users, as well as preventing access by, or disclosure to, unauthorized ones. Increased confidentiality impact increases the vulnerability score."""),
                                     vocabulary=ImpactVocabulary,
                                     default="N",
                                     required=False)

    cvss_integrity_impact = schema.Choice(
                               title=_(u"Integrity Impact"),
                               description=_(u"""This metric measures the impact to integrity of a successfully exploited vulnerability. Integrity refers to the trustworthiness and guaranteed veracity of information. Increased integrity impact increases the vulnerability score."""),
                               vocabulary=ImpactVocabulary,
                               default="N",
                               required=False)

    cvss_availability_impact = schema.Choice(
                                  title=_(u"Availability Impact"),
                                  description=_(u"""This metric measures the impact to availability of a successfully exploited vulnerability. Availability refers to the accessibility of information resources. Attacks that consume network bandwidth, processor cycles, or disk space all impact the availability of a system. Increased availability impact increases the vulnerability score."""),
                                  vocabulary=ImpactVocabulary,
                                  default="N",
                                  required=False)


class Vulnerability(Item):
    implements(IVulnerability)


    @property
    def cvss_score(self):
        """ Scoring, based on http://www.first.org/cvss/cvss-guide#i2.4
        """

        scoring = ["low", "medium", "high"]
        impact_scoring = [0.0, 0.275, 0.660]
        authentication_scoring = [0.45, 0.56, 0.704]
        complexity_scoring = [0.35, 0.61, 0.71]
        vector_scoring = [0.395, 0.646, 1.0]

        access_vector = vector_scoring[scoring.index(AccessVectorVocabulary.getTerm(self.cvss_access_vector).token)]
        access_complexity = complexity_scoring[scoring.index(ComplexityVocabulary.getTerm(self.cvss_access_complexity).token)]
        authentication = authentication_scoring[scoring.index(AuthenticationVocabulary.getTerm(self.cvss_authentication).token)]
        conf_impact = impact_scoring[scoring.index(ImpactVocabulary.getTerm(self.cvss_confidentiality_impact).token)]
        integ_impact = impact_scoring[scoring.index(ImpactVocabulary.getTerm(self.cvss_integrity_impact).token)]
        avail_impact = impact_scoring[scoring.index(ImpactVocabulary.getTerm(self.cvss_availability_impact).token)]

        impact = 10.41*(1-(1-conf_impact)*(1-integ_impact)*(1-avail_impact))
        exploitability = 20* access_vector*access_complexity*authentication

        if impact == 0:
            f_impact = 0
        else:
            f_impact = 1.176

        base_score = round(fabs(((0.6*impact)+(0.4*exploitability)-1.5)*f_impact), 1)

        return base_score
