from Products.Five.browser import BrowserView
from plone.app.vulnerabilities.content.vulnerability import AccessVectorVocabulary
from plone.app.vulnerabilities.content.vulnerability import AuthenticationVocabulary
from plone.app.vulnerabilities.content.vulnerability import ComplexityVocabulary
from plone.app.vulnerabilities.content.vulnerability import ImpactVocabulary


class VulnerabilityView(BrowserView):

    @property
    def cvss_scores(self):

        scores = []
        term = AccessVectorVocabulary.getTerm(self.context.cvss_access_vector)
        scores.append({"label": "Vector",
                       "css-class": term.token,
                       "value": term.title})

        term = ComplexityVocabulary.getTerm(self.context.cvss_access_complexity)
        scores.append({"label": "Complexity",
                       "css-class": term.token,
                       "value": term.title})

        term = AuthenticationVocabulary.getTerm(self.context.cvss_authentication)
        scores.append({"label": "Authentication",
                       "css-class": term.token,
                       "value": term.title})

        term = ImpactVocabulary.getTerm(self.context.cvss_confidentiality_impact)
        scores.append({"label": "Confidentiality",
                       "css-class": term.token,
                       "value": term.title})

        term = ImpactVocabulary.getTerm(self.context.cvss_integrity_impact)
        scores.append({"label": "Integrity",
                       "css-class": term.token,
                       "value": term.title})

        term = ImpactVocabulary.getTerm(self.context.cvss_availability_impact)
        scores.append({"label": "Availability",
                       "css-class": term.token,
                       "value": term.title})

        return scores

    @property
    def scariness(self):
        """ Scoring, based on http://www.first.org/cvss/cvss-guide#i2.4
        """

        base_score = self.context.cvss_score

        if base_score < 4.00:
            scariness = "low"
        elif base_score < 7.00:
            scariness = "medium"
        else:
            scariness = "high"

        return scariness
